<launch>
  <arg name="use_external_renderer" default="0" />
  <arg name="ignore_collisions" default="false" />
  <arg name="render_stereo" default="0" />
  <arg name="level"/>
  <arg name="gate_locations" default="0"/>
  <env name="CWD" value="$(env PWD)" />
     
  <!--include core flightgoggles launch file-->
  <include file="$(find flightgoggles)/launch/core.launch">
    <arg name="use_external_renderer" value="$(arg use_external_renderer)"/>
    <arg name="render_stereo" value="$(arg render_stereo)"/>
    <arg name="ignore_collisions" value="$(arg ignore_collisions)"/>
    <arg name="gate_locations" value="$(arg gate_locations)"/>
  </include>

  <node name="reporter" pkg="flightgoggles_reporter" type="reporter.py" output="screen" cwd='node' required="true"/>

  <!-- Launch override settings. Must be placed at end of file to override params set in core launchfile. -->

  <!--For teleoperation, run dynamics in real time-->
  <param name="/use_sim_time" value="true" />
  <group ns="/uav"> 
    <rosparam command="load" file="$(find flightgoggles)/config/challenges/gate_locations_$(arg gate_locations).yaml"/>
    <rosparam command="load" file="$(find flightgoggles)/config/challenges/challenge_final.yaml"/>
  </group>

  <!-- Set Parameters. Wait times per node to wait for simulator -->
  <param name="riseq/trajectory_wait" value="41" type="int" />
  <param name="riseq/estimator_wait" value="10" type="int" />
  <param name="riseq/control_wait" value="40" type="int" />
  <param name="riseq/perception_wait" value="5" type="int"/>
  <param name="riseq/control_type" value="pid" type="str" />
  
  <!-- RISE-Q Nodes -->
  <node ns="estimator" name="EKF" pkg="estimation" type="estimator_EKF_imu.py" />
  <node ns="estimator" name="lpf" pkg="estimation" type="LPF_imu.py" />
  <node ns="estimator" name="ir_detector" pkg="estimation" type="gate_detector.py" output="screen"/>
  <node pkg="tests" name="uav_posestamped_publisher" type="uav_poseStamped_publisher.py"/>
  <node pkg="tests" name="uav_state_publisher" type="uav_state_publisher.py"/>
  <node pkg="tests" name="uav_trajectory_publisher" type="uav_reftraj_publisher.py"/>
  <!--node pkg="tests" name="uav_input_publisher" type="uav_input_publisher.py" output="screen"/ -->
  <node pkg="tests" name="riseq_error_publisher" type="state_error_publisher.py"/>
  <node pkg="rqt_plot" name="rqt_plot" type="rqt_plot"/>

</launch>


